using DoubleDouble;
using System.Collections.ObjectModel;
using System.Diagnostics;

namespace ComplexBesselSandbox {
    internal class Program {
        static void Main() {
            ddouble c1 = AmosPowerSeries.BesselK(0, 0.5);
            ddouble c2 = AmosPowerSeries.BesselK(-ddouble.Ldexp(1, -16), 0.5);

            Console.WriteLine("END");
            Console.Read();
        }

        public static class AmosPowerSeries {
            internal static (ddouble g1, ddouble g2) Gamma12(ddouble nu) {
                Debug.Assert(ddouble.Abs(nu) <= 0.5);

                ddouble nu2 = nu * nu;
                ddouble gm = ddouble.RcpGamma(1d - nu), gp = ddouble.RcpGamma(1d + nu);

                ddouble g1 = g1_coef[^1];

                for (int i = g1_coef.Count - 2; i >= 0; i--) {
                    g1 = g1 * nu2 + g1_coef[i];
                }

                ddouble g2 = (gm + gp) / 2d;

                return (g1, g2);
            }

            public static ddouble BesselK(ddouble nu, ddouble x, int terms = 128) {
                ddouble nu2 = nu * nu;
                ddouble t = ddouble.Log(2d / x), mu = nu * t;
                (ddouble g1, ddouble g2) = Gamma12(nu);

                ddouble f = (g1 * ddouble.Cosh(mu) + g2 * t * ddouble.Sinhc(mu)) / ddouble.Sinc(nu);
                ddouble r = ddouble.Pow(x / 2d, nu);
                ddouble p = ddouble.Gamma(1d + nu) / (r * 2d), q = ddouble.Gamma(1d - nu) * r * 0.5d;

                ddouble c = f, v = ddouble.Ldexp(x * x, -2), u = v;

                for (int k = 1; k <= terms; k++) {
                    f = (k * f + p + q) / (k * k - nu2);
                    ddouble dc = u * f;

                    if (!ddouble.IsFinite(dc) || ddouble.ILogB(dc) < ddouble.ILogB(c) - 106L) {
                        break;
                    }

                    c += dc;

                    p /= k - nu;
                    q /= k + nu;
                    u *= v / (k + 1);
                }

                return c;
            }

            static readonly ReadOnlyCollection<ddouble> g1_coef = new([
                "-5.7721566490153286060651209008240243104215933593992359880576723488486772677766467093694706329174674951463144724980708248096050401e-1",
                "4.2002635034095235529003934875429818711394500401106093522065812976180096875975988547107701294787713233532000222000018057920376209e-2",
                "4.2197734555544336748208301289187391301652684189822486376918873275459011185588996067347284293755315040623348260570825108698753426e-2",
                "-7.2189432466630995423950103404465727099048008802383180010947811736225949741585427140890901208498888637635801976888597953114153098e-3",
                "2.1524167411495097281572996305364780647824192337833875035026748908563946371678473918618511946256248152595632197392449451634172139e-4",
                "2.0134854780788238655689391421021818382294833297979115261162670908229186188970477623308123836503018826105986111587179319457234847e-5",
                "-1.1330272319816958823741296203307449433240048386210756542955053954604084273036763420590995993415717941517231025547234722822462933e-6",
                "-6.1160951044814158178624986828553428672758657197123208673240292772350743525038619728262116887501225683892487235937602750528299355e-9",
                "1.1812745704870201445881265654365055777387595049325875909618926316964339143627314395179682881445597397880487583505666714007187529e-9",
                "-7.7822634399050712540499373113607772260680861813929388194355073269298695750789780388273795076641072819133934624068890593596380892e-12",
                "-5.1003702874544759790154813228632318027268860697076321173501048565735244789958170698326306387761986379183992397562298792758319588e-13",
                "5.3481225394230179823700173187279399489897154781206821116809549321093145391434840956648344143646850543978538090984063986722736076e-15",
                "1.1812593016974587695137645868422978312115572918048478798375081233347333150389845057395332771974547841071012147884241118067878965e-16",
                "-1.4123806553180317815558039475667090370863507503345256256412226286007149117138456955524058652699332905253282343271511903390035321e-18",
                "-1.7144063219273374333839633702672570668126560625174331746498581922023399583377163871306729249802184043231287082833136457372648227e-20",
                "2.0542335517666727893250253513557337966820379352387364127300559948662870974501546088720333049537944598877602433444708662695884792e-22",
                "1.7323564459105166390574284515647797990697491087949984137725562299487072534376449373560165507643256329186452433788150544484647345e-24",
            ]);
        }
    }
}
