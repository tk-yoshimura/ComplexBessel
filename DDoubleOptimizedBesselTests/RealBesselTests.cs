using ComplexBessel;
using DoubleDouble;

namespace DDoubleOptimizedBesselTests {
    [TestClass()]
    public class RealBesselTests {
        [TestMethod()]
        public void BesselJTest() {
            for (double nu = -16; nu <= 16; nu += 0.25) {
                Console.WriteLine(nu);

                for (double x = 0.125; x <= 42; x += 0.125) {

                    ddouble expected = BesselN4.BesselJ(nu, x).R.ToString();
                    ddouble actual = DDoubleOptimizedBessel.RealBessel.BesselJ(nu, x);

                    ddouble err = ddouble.Abs((expected - actual) / expected);

                    Console.WriteLine($"{nu}, {x}, {err:e4}");
                    Console.WriteLine(expected);
                    Console.WriteLine(actual);

                    Assert.IsTrue(err < 6e-27, $"\n{nu}, {x}\n{expected}\n{actual}\n{err:e4}");
                }

                Console.WriteLine(string.Empty);
            }
        }

        [TestMethod()]
        public void BesselYTest() {
            for (double nu = -16; nu <= 16; nu += 0.25) {
                Console.WriteLine(nu);

                for (double x = 0.125; x <= 42; x += 0.125) {

                    ddouble expected = BesselN4.BesselY(nu, x).R.ToString();
                    ddouble actual = DDoubleOptimizedBessel.RealBessel.BesselY(nu, x);

                    ddouble err = ddouble.Abs((expected - actual) / expected);

                    Console.WriteLine($"{nu}, {x}, {err:e4}");
                    Console.WriteLine(expected);
                    Console.WriteLine(actual);

                    Assert.IsTrue(err < 6e-27, $"\n{nu}, {x}\n{expected}\n{actual}\n{err:e4}");
                }

                Console.WriteLine(string.Empty);
            }
        }

        [TestMethod()]
        public void BesselITest() {
            for (double nu = -16; nu <= 16; nu += 0.25) {
                Console.WriteLine(nu);

                for (double x = 0.125; x <= 42; x += 0.125) {

                    ddouble expected = BesselN4.BesselI(nu, x).R.ToString();
                    ddouble actual = DDoubleOptimizedBessel.RealBessel.BesselI(nu, x);

                    ddouble err = ddouble.Abs((expected - actual) / expected);

                    Console.WriteLine($"{nu}, {x}, {err:e4}");
                    Console.WriteLine(expected);
                    Console.WriteLine(actual);

                    Assert.IsTrue(err < 4e-30, $"\n{nu}, {x}\n{expected}\n{actual}\n{err:e4}");
                }

                Console.WriteLine(string.Empty);
            }
        }

        [TestMethod()]
        public void BesselKTest() {
            for (double nu = 0; nu <= 16; nu += 0.25) {
                Console.WriteLine(nu);

                for (double x = 0.125; x <= 42; x += 0.125) {

                    ddouble expected = BesselN4.BesselK(nu, x).R.ToString();
                    ddouble actual = DDoubleOptimizedBessel.RealBessel.BesselK(nu, x);

                    ddouble err = ddouble.Abs((expected - actual) / expected);

                    Console.WriteLine($"{nu}, {x}, {err:e4}");
                    Console.WriteLine(expected);
                    Console.WriteLine(actual);

                    Assert.IsTrue(err < 8e-30, $"\n{nu}, {x}\n{expected}\n{actual}\n{err:e4}");
                }

                Console.WriteLine(string.Empty);
            }
        }


        [TestMethod]
        public void BesselYInterpolateTest() {
            ddouble[] num16peps_expecteds = {
                "-5.032414217611984868516455742003085841619e35",
                "-7.680357180933829429932091406749680165100e30",
                "-1.169668335035225513372836364630516214980e28",
                "-1.172845859436864691501193258159982305865e26",
                "-3.303203049084421053018767912613925642169e24",
                "-1.787913213654999842611923967137604601787e23",
                "-1.519026923807144381086339910206593546096e22",
                "-1.795223707096972734692969052931936116431e21",
                "-2.729977493501573405006903991894067242018e20",
                "-5.064967686910244359429457727025685513561e19",
                "-1.103793427351789923573418089932678887026e19",
                "-2.747397884324722226300047321626440821954e18",
                "-7.646016848452989229848125743168086586692e17",
                "-2.340153737102119434680185435191095271719e17",
                "-7.774162085442799442224642541730919553747e16",
                "-2.773776825285558421544697295628997576099e16",
                "-1.053762522211160399150373372080389452106e16",
                "-4.232105046785806867484870697473446802885e15",
                "-1.786103990011643302875500541968679597835e15",
                "-7.881140962801224112381906135935650704811e14",
                "-3.620110661504063673027714631074733214606e14",
                "-1.724590955690700584418928094611995301518e14",
                "-8.493349382587419705794332933536123629016e13",
                "-4.311980980657408457721947680309561831638e13",
                "-2.251157653657353562326660321157390570933e13",
                "-1.205921044854304846319004555947134565819e13",
                "-6.615698359772227887802058440321801440820e12",
                "-3.710462371641669561373846134827134550664e12",
                "-2.124253552793777712729322810623662412382e12",
                "-1.239679022409917845853456976870130917058e12",
                "-7.365368905511051061965679263354706636681e11",
                "-4.450118226711904256598293383953967776949e11",
                "-2.731461802547188323277434389955545828236e11",
                "-1.701609447789622872546386976512556802867e11",
                "-1.074968457923333188902386684178453749402e11",
                "-6.881194346702206499472885367870915443637e10",
                "-4.460188876279471306112807836460924853372e10",
                "-2.925350731064113172129575795152069558547e10",
                "-1.940323508816852315739106761243658200262e10",
                "-1.300762914007676070410505075008159046219e10",
                "-8.808953050486800672521788443223382251575e9",
                "-6.023421643513140122372353999053493775592e9",
                "-4.156813249954406565532258413486877038748e9",
                "-2.893975997931463944910443756169154210061e9",
                "-2.031784305083368942488402936806829392058e9",
                "-1.437973193927143814034054073539826239629e9",
                "-1.025573818026108443993632049093126648967e9",
                "-7.368647269716288207806243228343917120989e8",
                "-5.331920169685525894882047485108729310548e8",
                "-3.884478528559272451045018250872140864690e8",
                "-2.848527786389236532438981181294086557932e8",
                "-2.102030228944294321177703449449456870962e8",
                "-1.560581675017217345836657459619604807237e8",
                "-1.165378751166085249490798392780685846602e8",
                "-8.751651675487201625692277358490271871232e7",
                "-6.607991724836853755089514801922908066875e7",
                "-5.015615767297996226619653238802034121506e7",
                "-3.826285218563184004072718409489684193274e7",
                "-2.933294716298600041375814797898588666360e7",
                "-2.259383720017476228993432213696882644075e7",
                "-1.748293440733278584038850468437213873390e7",
                "-1.358832807845061136419659145604945027225e7",
                "-1.060682548861975680084406037270724409974e7",
                "-8.314108624135924323977396053707081161215e6"
            };
            ddouble[] num15meps_expecteds = {
                "1.048430676718786887808508367149103032744e33",
                "3.200225079880570678996675647392352863945e28",
                "7.310768464129588167099610610349643516190e25",
                "9.774487446053303025606890413364060927269e23",
                "3.441251610307810459284673999559498689544e22",
                "2.235275136933890092334738919332935693763e21",
                "2.215761554293232649854579783630712473437e20",
                "2.992942255616938072614953848795514854523e19",
                "5.120656866559147574784110030399546741793e18",
                "1.055696690373850940166452578062361647266e18",
                "2.530960773010611438867907039032329797502e17",
                "6.873124968548931159146868788560380436009e16",
                "2.072433560482190815137959628525761802356e16",
                "6.831704777855723992288531423767643276048e15",
                "2.431981381655417078149316801429262181374e15",
                "9.256988134461296232101580769829792864774e14",
                "3.737117744798640325943201369528236176953e14",
                "1.589443346950868293087837855194070363782e14",
                "7.081928687096672713206377083607371104176e13",
                "3.289951577881196372159857948147457481850e13",
                "1.587065603017350500488677535770232434027e13",
                "7.922276017601638726187877468735217232165e12",
                "4.079806713094769221041606536746031414622e12",
                "2.161805210815274403518845182510696580946e12",
                "1.175910499283178846134267446369581708764e12",
                "6.552765059379654010699298013455301308109e11",
                "3.734049144628512522514023266339367580877e11",
                "2.172396060157466656153358867948879470916e11",
                "1.288468654809718148618815544900863404230e11",
                "7.780737742374291659482502445408388862953e10",
                "4.778278337606165197809376112588841225506e10",
                "2.981027440694448221086738686576638687612e10",
                "1.887499975756507926077308339500146999012e10",
                "1.211865368907330203002785482319599847655e10",
                "7.883540166826993795296777658338207530816e9",
                "5.192423060233620537525965329478918596359e9",
                "3.460264020563411007592057204776581629554e9",
                "2.331689007568770739734347132138023989780e9",
                "1.587840894665641389308500436834711679684e9",
                "1.092169009506247539089383701522350237642e9",
                "7.584163691592182385829805569445508090745e8",
                "5.314523179944278127064413490026888664141e8",
                "3.756447388136167595040822184890906508715e8",
                "2.677176096100202125721346012164761624240e8",
                "1.923113299719015110247122591023815055700e8",
                "1.391916679671952667858796682634961135649e8",
                "1.014760894038632278795356227006415262795e8",
                "7.449493533849205513692518656679470045705e7",
                "5.505297154175115080498308177037795729241e7",
                "4.094601144502343638295988266643839195384e7",
                "3.064163120387034220919441404699415149528e7",
                "2.306643526209503605928546155794245393585e7",
                "1.746312973743397782622131967038604138676e7",
                "1.329372532217976494523044018968217054575e7",
                "1.017347527149471067420735668236066400442e7",
                "7.825454537275210459876015425978010052401e6",
                "6.049107335852285156817311337091205155764e6",
                "4.698317287158186953717611281616118749644e6",
                "3.666015451144330726368581034182008429484e6",
                "2.873307862125024680828568288795990508467e6",
                "2.261747965984043999771783055404995390932e6",
                "1.787811432467671624661875839113540719687e6",
                "1.418922816270517386971821872881039526780e6",
                "1.130582219714220983926977883746462467842e6"
            };
            ddouble[] nup15peps_expecteds = {
                "-1.048430676719963273278178292250708436262e33",
                "-3.200225079884161472710788380274148911882e28",
                "-7.310768464137791171823050188841179652298e25",
                "-9.774487446064270431712360923149423693541e23",
                "-3.441251610311671695398552199158081967478e22",
                "-2.235275136936398169645136795708281372743e21",
                "-2.215761554295718832064434136047211629276e20",
                "-2.992942255620296285856183979569873513321e19",
                "-5.120656866564893177680658476854031304302e18",
                "-1.055696690375035478423975860954679192952e18",
                "-2.530960773013451288505836746222065057211e17",
                "-6.873124968556643108562094860651098704016e16",
                "-2.072433560484516177015997731203755635464e16",
                "-6.831704777863389466422592563069949980040e15",
                "-2.431981381658145868543776608741273463860e15",
                "-9.256988134471682981150519620912735623890e14",
                "-3.737117744802833536911794523066651928651e14",
                "-1.589443346952651718639700124445873721664e14",
                "-7.081928687104618949604965143274750097187e13",
                "-3.289951577884887842962915318395242763672e13",
                "-1.587065603019131258106954782307635365022e13",
                "-7.922276017610527869362310575494564023336e12",
                "-4.079806713099346944149983133037106856247e12",
                "-2.161805210817700044331091217189572755758e12",
                "-1.175910499284498269588489854292619345602e12",
                "-6.552765059387006502164103393180303787233e11",
                "-3.734049144632702290377857541047863051515e11",
                "-2.172396060159904180365770767881141996788e11",
                "-1.288468654811163867288920675689295129291e11",
                "-7.780737742383021990468321718016497949889e10",
                "-4.778278337611526636892778824416537411251e10",
                "-2.981027440697793065380016540991879583271e10",
                "-1.887499975758625784315138079676642478199e10",
                "-1.211865368908689969406836583076323016653e10",
                "-7.883540166835839475137851231022408784872e9",
                "-5.192423060239446665257704971713560069721e9",
                "-3.460264020567293576468954223170557563767e9",
                "-2.331689007571386997660791543514983536934e9",
                "-1.587840894667423016838208243079212698489e9",
                "-1.092169009507473000897910686072296945384e9",
                "-7.584163691600692152058994956613231389210e8",
                "-5.314523179950241256516784522369366431339e8",
                "-3.756447388140382494721947326093006110404e8",
                "-2.677176096103206035401915133949327596875e8",
                "-1.923113299721172928205483422392925021272e8",
                "-1.391916679673514459776297899550731037902e8",
                "-1.014760894039770885283555971064691946471e8",
                "-7.449493533857564174063934419258723221362e7",
                "-5.505297154181292266765613239114851603191e7",
                "-4.094601144506937961409123975117234069845e7",
                "-3.064163120390472347112881598514390829017e7",
                "-2.306643526212091761720192174644452530916e7",
                "-1.746312973745357222815576954322376636235e7",
                "-1.329372532219468109148277219603517886054e7",
                "-1.017347527150612576225710174557783155499e7",
                "-7.825454537283990965082525032029293399285e6",
                "-6.049107335859072522103411146180092201257e6",
                "-4.698317287163458672981989495742484408338e6",
                "-3.666015451148444157436040174574594226602e6",
                "-2.873307862128248659014186336570354796061e6",
                "-2.261747965986581780778730550810114014798e6",
                "-1.787811432469677627974891910873730285355e6",
                "-1.418922816272109480989153459489184565661e6",
                "-1.130582219715489547081095459297347411317e6"
            };
            ddouble[] nup16meps_expecteds = {
                "-5.032414217617631459268155941294547557928e35",
                "-7.680357180942447129499793997897787585371e30",
                "-1.169668335036537932843406208171142241469e28",
                "-1.172845859438180676294314811590855712335e26",
                "-3.303203049088127392557089697713447259933e24",
                "-1.787913213657005960109512936179459740917e23",
                "-1.519026923808848796305090165243912636936e22",
                "-1.795223707098987054886694469432688757327e21",
                "-2.729977493504636560184633089125219856600e20",
                "-5.064967686915927476609771851917682095105e19",
                "-1.103793427353028428491566431717320674883e19",
                "-2.747397884327804927924761792881015853471e18",
                "-7.646016848461568398047898006092014333298e17",
                "-2.340153737104745190406578687362058163290e17",
                "-7.774162085451522395033306648310019074017e16",
                "-2.773776825288670721504848428236531393187e16",
                "-1.053762522212342767185894368384634006932e16",
                "-4.232105046790555476042125792698772022402e15",
                "-1.786103990013647390344349710232304637826e15",
                "-7.881140962810067100210224486324555338077e14",
                "-3.620110661508125596887209661323781294390e14",
                "-1.724590955692635651549687829189372123729e14",
                "-8.493349382596949618476567246407612619777e13",
                "-4.311980980662246690600647608124413070961e13",
                "-2.251157653659879460521462063064081825033e13",
                "-1.205921044855657942929240701041034821168e13",
                "-6.615698359779650993206139133780592972713e12",
                "-3.710462371645832863837884055067351830651e12",
                "-2.124253552796161218924717728877453401418e12",
                "-1.239679022411308820403707384215490897777e12",
                "-7.365368905519315330792988577919036781260e11",
                "-4.450118226716897485560842463560594859062e11",
                "-2.731461802550253143915391363914509606291e11",
                "-1.701609447791532153411477203370468315573e11",
                "-1.074968457924539350933253779846658918140e11",
                "-6.881194346709927503086371351386851260991e10",
                "-4.460188876284475834788427598325977482497e10",
                "-2.925350731067395544698530262731312689428e10",
                "-1.940323508819029444311283543141490494654e10",
                "-1.300762914009135583781778333225909469393e10",
                "-8.808953050496684706441922154458644211879e9",
                "-6.023421643519898667173141799414143814984e9",
                "-4.156813249959070693372052048803209380561e9",
                "-2.893975997934711113644760780424008242449e9",
                "-2.031784305085648694108685373267782275037e9",
                "-1.437973193928757283392280847378456816865e9",
                "-1.025573818027259183059543026628158986743e9",
                "-7.368647269724556155102811917393040124410e8",
                "-5.331920169691508544524356507844274674646e8",
                "-3.884478528563631007313652502428757570842e8",
                "-2.848527786392432706275047808186936846053e8",
                "-2.102030228946652891823379774518465308624e8",
                "-1.560581675018968387319406611143743144681e8",
                "-1.165378751167392855859034066672216765064e8",
                "-8.751651675497021364941838136032616809390e7",
                "-6.607991724844268213309181870978430817951e7",
                "-5.015615767303623968768994622214272757378e7",
                "-3.826285218567477264880322586164006804865e7",
                "-2.933294716301891327446538298708935486806e7",
                "-2.259383720020011357197438379890626496861e7",
                "-1.748293440735240246403262060467421571126e7",
                "-1.358832807846585806773282763206167885703e7",
                "-1.060682548863165812694808849164322470009e7",
                "-8.314108624145253120617931882502921719179e6"
            };
            ddouble[] nu0peps_expecteds = {
                "-1.836473021503460316741058687583396688387",
                "-1.389681371234590549989129149031524914433",
                "-1.123921590665490456527232955707891221409",
                "-0.9315737622860743736153021237349626183540",
                "-0.7791300843769235889701971712376800022140",
                "-0.6518009287050419116090864125321020376381",
                "-0.5417915110263980658042513302926571313619",
                "-0.4445194364335563667119984047286939197599",
                "-0.3570837611273612581351403227787286689144",
                "-0.2775476443966413573387874348281516310481",
                "-0.2045654843997381402289304152720216726997",
                "-0.1371734167152563965299276758376097446656",
                "-0.07466421575626901527892664398804231535331",
                "-0.01650884258940185337145458248254047651323",
                "0.03769478336285061119418969381141927067537",
                "0.08825639107190108816314804909982637892736",
                "0.1354174230418634467232260158862169361760",
                "0.1793681935399266126653084493680639189042",
                "0.2202603916424060425590797846823597077913",
                "0.2582163678017865906543240724917659544153",
                "0.2933361483565648621104491540316084810469",
                "0.3257028129109867476733516864674346652026",
                "0.3553866706023606184313082495545332772491",
                "0.3824485404315713883472000896563116520912",
                "0.4069423529536667093690759994402246365497",
                "0.4289172304844118387727991129738448121050",
                "0.4484191611153604080459259892809878763312",
                "0.4654923522362508361665989413204620693659",
                "0.4801803280470276528454027261936173320803",
                "0.4925268201344115340162303060599098133972",
                "0.5025764888667757684330839393782862668813",
                "0.5103755049522784680978975636580219653006",
                "0.5159720141975142003802473430588024650644",
                "0.5194165037292930954121770649862197938246",
                "0.5207620842977829255223963708850701355192",
                "0.5200647004763391619381224058982910629955",
                "0.5173832784025421219250267620119190813490",
                "0.5127798190129658651217923807982949019459",
                "0.5063194433977097380689905600028562904045",
                "0.4980703958552225499545300201631198392638",
                "0.4881040093998810346932358484869448560060",
                "0.4764946378159603727385551006508050292933",
                "0.4633195578252439261254926644571059036174",
                "0.4486588445132391477861224211853410622911",
                "0.4325952228188559962862438234928740751288",
                "0.4152138976173558166618864630842670039349",
                "0.3966023647029718156893917216036709922612",
                "0.3768502047952470040212870863841650006225",
                "0.3560488625434295878661960720974661968589",
                "0.3342914123795084991152793142187863349718",
                "0.3116723129672936006839342872219567525244",
                "0.2882871519080245563100174974071337560364",
                "0.2642323822888375405164092031706074597101",
                "0.2396050525961986658721172215060415337711",
                "0.2145025314598250654418227925362429608249",
                "0.1890222286417829154681205987072695702615",
                "0.1632613136388453280491687342389456599877",
                "0.1373164332225620589398714382830352590050",
                "0.1112834291998176482177140718742826003289",
                "0.08525705763610486300072610900266621875541",
                "0.05933071074364316082788383621517489396148",
                "0.03359614259628524124009242303392753269702",
                "0.008143199792446160789428724575348653869585",
                "-0.01694044185428110039778200158820894932849"
            };
            ddouble[] nu0meps_expecteds = {
                "-1.836471524937908106035961153077845453465",
                "-1.389679879052437652582352294226187064954",
                "-1.123920105774738459578907222927770326463",
                "-0.9315722875733766738502543610316754599626",
                "-0.7791286226991434266094600957398075162075",
                "-0.6517994828809073156748252898198767299093",
                "-0.5417900838282808310831131324265031610754",
                "-0.4445180305794017590784724370658915493882",
                "-0.3570823792727946301804570390570632003362",
                "-0.2775462891272772521898047003482239550415",
                "-0.2045641582237167702043230251964143360980",
                "-0.1371721220560316072970273931620619865443",
                "-0.07466295494567098816913424831036361049040",
                "-0.01650761786099686149781350589444519871198",
                "0.03769596988008209010778570935290498186106",
                "0.08825753735954768423156828025499859703688",
                "0.1354185271977085708785939326262107756408",
                "0.1793692537831986429890087106906290718127",
                "0.2202614063186364544126796309072808331861",
                "0.2582173353872607942440965261079536959412",
                "0.2933370674623518952074954802727359737210",
                "0.3257036822865354013499690322112353601615",
                "0.3553874891386510448586806513279648711690",
                "0.3824493071638127467831457180375073317572",
                "0.4069430670635329441782540011274215580494",
                "0.4289178913018092462924056329902812631847",
                "0.4484197681197222318797311298282292793490",
                "0.4654929050573557275361817971470964957412",
                "0.4801808264653404383810338534694859147392",
                "0.4925272640809463422366709339254846800635",
                "0.5025768784224831725433980107412947134290",
                "0.5103758403469599010410326632631234556436",
                "0.5159722958082684827593528307890564380523",
                "0.5194167320785014824577143510465907615685",
                "0.5207622600506406202854863203264820001084",
                "0.5200648244379427530160319834242899464005",
                "0.5173833515145438800442013348854137647471",
                "0.5127798423498072687260565064143504676775",
                "0.5063194181624479887408067304979287938427",
                "0.4980703233749651792559769702359741634787",
                "0.4881038911208449902530548458079004853551",
                "0.4764944752981731987327466923223713217991",
                "0.4633193527369058175156277560374995759241",
                "0.4486585986247657548340917089361446037133",
                "0.4325949379966228822410021464902707042847",
                "0.4152135758171664236522584976611048899692",
                "0.3966020079632716685636297204369358334765",
                "0.3768498152301076762333297183485898427320",
                "0.3560484423353266648931126813764239243595",
                "0.3342909637719184009699577220533299322573",
                "0.3116718382571346638364820918463923715907",
                "0.2882866534379682250372489187823319281471",
                "0.2642318624395158769653740307699082195508",
                "0.2396045137783346558771674780405438950044",
                "0.2145019761063123726269360312539391151600",
                "0.1890216591997418189764977999377701625328",
                "0.1632607325616815692785768750283621637168",
                "0.1373158429620552201614105468725205675956",
                "0.1112828321982654914814484460914635613323",
                "0.08525645631854977217239587769204974966031",
                "0.05933010751020645416616856573656357935216",
                "0.03359553981463465813926362282479857914863",
                "0.008142599790421276013543287755773419650527",
                "-0.01694103679586141633674625404354483191670"
            };
            ddouble[] nu4peps_expecteds = {
                "-2.003289211551707315970189066922556855783e6",
                "-125327.9149642119212475663106976482108039",
                "-24796.49543289922723811542008765567762945",
                "-7863.699929381332305008579093381678338559",
                "-3230.453451910844424617140298077021183252",
                "-1563.512803933728142955373276678054389269",
                "-847.5497198545345321777941697315128756031",
                "-499.2731882180928909147887801988935997064",
                "-313.4449773500775359814206614008945608423",
                "-206.9472250260281758067764322948597137382",
                "-142.3362258880181790254234475751371461181",
                "-101.2721021877456184134297067980432823637",
                "-74.14405031496779979299515186886487847063",
                "-55.62673404148093327917381164778285399181",
                "-42.62781997720136469040684695024651883920",
                "-33.27845348010758730987765847753879467874",
                "-26.40957066227894802637561249569400993984",
                "-21.26753849995764921096566628349966305535",
                "-17.35350150388489309259935693719558691440",
                "-14.32940617150623180720105120081241149823",
                "-11.96131230438749874265292793079390823553",
                "-10.08424689921146356342293686959770686867",
                "-8.579872057342663713154643256610889360930",
                "-7.361976987631297767364794191168569082586",
                "-6.366861569089953158378762303503850041771",
                "-5.546844427551742771854666032389984861206",
                "-4.865806282570869077418199083611430714697",
                "-4.296083043621170610025952503797052776019",
                "-3.816268923262730042558775440473931303314",
                "-3.409642507898801999732029972678725556649",
                "-3.063025331981256376200766985979110051970",
                "-2.765944684592085832771674530632122752878",
                "-2.510013043938502084042845400127417685115",
                "-2.288463526155291035206438737075332977905",
                "-2.095798897325463487471488618611486749985",
                "-1.927524077801325811171714431918280333413",
                "-1.779940609055571754997666825601792120845",
                "-1.649987513001637761744497766416905027500",
                "-1.535117176750570366425378092657594902245",
                "-1.433197889842519642072608407682360260350",
                "-1.342436814175370086125434509346175094465",
                "-1.261318729268205257043085315496975891925",
                "-1.188557038908166100130661547807356663795",
                "-1.123054368776400446476766928832830689888",
                "-1.063870711757019787892110891645507879176",
                "-1.010197547245432188741684495598775805901",
                "-0.9613367148922995608815017118441581665853",
                "-0.9166830920228379881930048069953688815760",
                "-0.8757103293063178095647409344492081928875",
                "-0.8379590570532992181852952046893864141162",
                "-0.8030270964943585773425102283434650885269",
                "-0.7705613052010116639285183875567149470740",
                "-0.7402507598912292782309663549221452443318",
                "-0.7118210380448189057473686466489723153168",
                "-0.6850294056745036294437625161674617660071",
                "-0.6596607550123648369949301834128352035497",
                "-0.6355241648780009888088343153968005476863",
                "-0.6124499797024730229350608331735541342770",
                "-0.5902873218289194041081882202260457815693",
                "-0.5689019667544190727291052067375439303259",
                "-0.5481745231627161543552098586011360539059",
                "-0.5279988695050679015902036652340618808474",
                "-0.5082808069725820038909545454731090825876",
                "-0.4889368953269653571354440745701536757517"
            };
            ddouble[] nu4meps_expecteds = {
                "-2.003280190746741318876533769118909454294e6",
                "-125327.4334979718012062655246032156553084",
                "-24796.40977458468071490142374045651885406",
                "-7863.674927779541926928887308715649516906",
                "-3230.443871611566355484693538282653772924",
                "-1563.508440815653277221332528865453671723",
                "-847.5474804606655354468279225077796479347",
                "-499.2719334217529369742186281851145224654",
                "-313.4442253705993986448567062247444673946",
                "-206.9467497678384807671820798390909666603",
                "-142.3359122798397326462158229116290301177",
                "-101.2718877222041123367582883843754398709",
                "-74.14389917149438497492803025718633116174",
                "-55.62662475292584335338778373931389094221",
                "-42.62773917976826570755210434100529069500",
                "-33.27839257786683384104284138746515411491",
                "-26.40952396652425166541431661858189016886",
                "-21.26750215071213576427662879566532029661",
                "-17.35347282344785522597883079524875535588",
                "-14.32938326532796376820140004402269799419",
                "-11.96129380807538355760778333497751502483",
                "-10.08423181434133356545008976682628937778",
                "-8.579859642617944108541454756262836471625",
                "-7.361966685332423117086981298910791650917",
                "-6.366852954494918508993055917487870353744",
                "-5.546837173593186365852550512059026190412",
                "-4.865800134775030449914853590188481914070",
                "-4.296077802095939443031795403728538314102",
                "-3.816264429589491869102606701484198024275",
                "-3.409638635482049571787119551348612838306",
                "-3.063021978867078732414938750380212744224",
                "-2.765941768070130086922870471908818586333",
                "-2.510010496446372453037501474966759140482",
                "-2.288461292143817953837162882724785136641",
                "-2.095796930839643712371373009819881858905",
                "-1.927522340599101134001311242382808999722",
                "-1.779939069134224287484530496852509014616",
                "-1.649986143435574971941872043450417114847",
                "-1.535115954768782671681225562426219197005",
                "-1.433196796091826251906924301934419467710",
                "-1.342435832128656269424913358936788058212",
                "-1.261317844746537891844789070196973590691",
                "-1.188556239692895268938651140553298285607",
                "-1.123053644292779087250508162719197603908",
                "-1.063870052814976653693874997140865639557",
                "-1.010196945826258076399491759044690658516",
                "-0.9613361639724014671751403761557388679382",
                "-0.9166825854275622526606874762415235403794",
                "-0.8757098615882752204087338707448399798691",
                "-0.8379586233907417103386462033459132340862",
                "-0.8030266926060325888647829849216984020623",
                "-0.7705609272746030503417479713490898115579",
                "-0.7402504045230609303124088957813004948851",
                "-0.7118207021888968018440208762175245111192",
                "-0.6850290865993543735198586796291929248150",
                "-0.6596604502643865270657171727895256991669",
                "-0.6355238722502739945103654105716115788227",
                "-0.6124496972081591501766000235773411521130",
                "-0.5902870476785257386136192765613312437795",
                "-0.5689016993363233741677433129066057467479",
                "-0.5481742610264494071684153296499585632182",
                "-0.5279986113469307733573535165322887322345",
                "-0.5082805516232388920607604216454928854705",
                "-0.4889366417407151070141232332130695830979"
            };

            for (int n = -16; n <= 16; n++) {
                foreach (ddouble u in new ddouble[] {
                    Math.ScaleB(-1, -8), Math.ScaleB(-1, -16), Math.ScaleB(-1, -20), Math.ScaleB(-1, -25), Math.ScaleB(-1, 96),
                    Math.ScaleB(1, -8), Math.ScaleB(1, -16), Math.ScaleB(1, -20), Math.ScaleB(1, -25), Math.ScaleB(1, -96) }) {
                    ddouble nu = n + u;

                    if (ddouble.Abs(nu) > 16) {
                        continue;
                    }

                    for (ddouble x = 1d / 32; x <= 8; x += 1d / 32) {
                        ddouble y = DDoubleOptimizedBessel.RealBessel.BesselY(nu, x);
                        ddouble y_dec = DDoubleOptimizedBessel.RealBessel.BesselY(ddouble.BitDecrement(nu), x);
                        ddouble y_inc = DDoubleOptimizedBessel.RealBessel.BesselY(ddouble.BitIncrement(nu), x);

                        Console.WriteLine($"{nu}, {x}");
                        Console.WriteLine(y);
                        Console.WriteLine(y_dec);
                        Console.WriteLine(y_inc);

                        Assert.IsTrue(ddouble.Abs((y_dec - y) / y) < 8e-26);
                        Assert.IsTrue(ddouble.Abs((y_inc - y) / y) < 8e-26);
                    }
                }
            }

            ddouble eps = Math.ScaleB(1, -21);

            foreach ((ddouble nu, ddouble[] expecteds) in new (ddouble, ddouble[])[] {
                (-16 + eps, num16peps_expecteds), (-15 - eps, num15meps_expecteds), (15 + eps, nup15peps_expecteds), (16 - eps, nup16meps_expecteds),
                (+eps, nu0peps_expecteds), (-eps, nu0meps_expecteds), (4 + eps, nu4peps_expecteds), (4 - eps, nu4meps_expecteds),
            }) {
                for ((ddouble x, int i) = (1d / 16, 0); i < expecteds.Length; x += 1d / 16, i++) {
                    ddouble expected = expecteds[i];

                    ddouble actual = DDoubleOptimizedBessel.RealBessel.BesselY(nu, x);

                    Console.WriteLine($"{nu}, {x}");
                    Console.WriteLine(expected);
                    Console.WriteLine(actual);

                    Assert.IsTrue(ddouble.Abs((expected - actual) / expected) < 8e-26);
                }
            }
        }

        [TestMethod]
        public void BesselKInterpolateTest() {
            ddouble[] nu15peps_expecteds = {
                "1.646641318707690186463945359189125269908e33",
                "5.024097392309411213598880272864686786691e28",
                "1.146931855452331769416640696939354619291e26",
                "1.531949548233750681332899378195457294147e24",
                "5.386685321491539915906634046639221541855e22",
                "3.493571998806705388603046954946309051047e21",
                "3.456798697785119316486668104190240715324e20",
                "4.659513618347583954190917148654122510475e19",
                "7.953127169620117557724900741353124485040e18",
                "1.635310556310616285889237719265565331072e18",
                "3.909076290306669789759525414542106229576e17",
                "1.058155388946551623959613802034470668298e17",
                "3.179516791882573670606342703306776497118e16",
                "1.044176028859293662550837238278104087424e16",
                "3.702097211139064798642257116400591594011e15",
                "1.403069054977598935379562245159226412859e15",
                "5.638280900279498328745654416735060222201e14",
                "2.386351365100684957777754495752915341272e14",
                "1.057789166818623831002241758003311843270e14",
                "4.887357636477069836019963158554989410890e13",
                "2.344203767643932885899428616530006781146e13",
                "1.163175197300756325692175469143566856884e13",
                "5.952621246562421073087547969355379157676e12",
                "3.133556524121824630775516626157218930832e12",
                "1.692880744216587330417685946583313606567e12",
                "9.366700348841213707724621524209722857556e11",
                "5.298229892796873359977465631725530682533e11",
                "3.058843931893535864153642643400568873704e11",
                "1.799859126100069193605496004433464377307e11",
                "1.077979682608708776441562732342420026764e11",
                "6.563948686238543963003391975732154383332e10",
                "4.059218517769219718003441152999516544470e10",
                "2.546976398011793827860841425620398759878e10",
                "1.620065704450944320730094721118683474515e10",
                "1.043803140929293599525656470070039691822e10",
                "6.807148314438203442509518291281741362996e9",
                "4.490358020768439493393405984192753166917e9",
                "2.994316472481042318532395995682970946970e9",
                "2.017289111493773884107184993712521142315e9",
                "1.372346674752678243119734627835690550808e9",
                "9.422653780044136278078311237878513409140e8",
                "6.526797065014189641283792574270680873682e8",
                "4.558921232744737922275142543199967541807e8",
                "3.209884350794207585079035552700363583953e8",
                "2.277317948186313111771013253248715152289e8",
                "1.627485231301601914264240642326081212751e8",
                "1.171200403644755788204886729023516173621e8",
                "8.484701176588870271663624283608777450546e7",
                "6.186022640450454572444458703085963388015e7",
                "4.537763781446489389023386389693892761588e7",
                "3.348268602235798342733550612588875870572e7",
                "2.484537680475888594481318867428392409451e7",
                "1.853627344170093979234251485983103668843e7",
                "1.390147281180127520983065105311214387353e7",
                "1.047793536823750562327015572762081533971e7",
                "7.935726622819420095063675868087997639745e6",
                "6.038340666316483963173925408119115567985e6",
                "4.615261147428737819825001159697437583643e6",
                "3.542862029187379086618766322615576001420e6",
                "2.731030082912292815720347077658572699427e6",
                "2.113738394218050050581756767940738374211e6",
                "1.642365219434453177553151321759924888843e6",
                "1.280931967159526232252701440700203987367e6",
                "1.002690567076755814940521012084817274314e6"
            };

            ddouble[] nu16meps_expecteds = {
                "7.903868551355663168972730583010839103506e35",
                "1.205799500660907130983976830506816485726e31",
                "1.835158886756148097904627879313176128393e28",
                "1.838467833941488216832496996158093366207e26",
                "5.171796509448381738815847353290563347975e24",
                "2.795313716635643683719803278854119897449e23",
                "2.370906673543399080450638077601284909038e22",
                "2.796529022134992179954294772815022528403e21",
                "4.243248764559722250444016028495690948744e20",
                "7.853109967327854296175924164633839786173e19",
                "1.706731794194639726108812559978189524087e19",
                "4.235438812768755640658794521037562941369e18",
                "1.174893179432207483919068051510343539103e18",
                "3.583279644101951781274103849852924623769e17",
                "1.185905236051597422239183588092844481235e17",
                "4.214197590421763414311413619831894504682e16",
                "1.594116334897187633582903470383763841839e16",
                "6.373155089637261686089546543240179721163e15",
                "2.676778732783058701567307795975738347604e15",
                "1.175139464265944053602779762009367051094e15",
                "5.369126594367300115674949425302664744584e14",
                "2.543526581460460386774269745226420232618e14",
                "1.245329974000971626363004204778678348992e14",
                "6.283830453478176187479412061218122614869e13",
                "3.259737261273021919264457516187757606629e13",
                "1.734648626554232517166437233050356829435e13",
                "9.450856838705060536117375448540594581422e12",
                "5.262756251938171323939944772503436012412e12",
                "2.990667965453697695448053905019561617944e12",
                "1.731947020219431876605964831715623736114e12",
                "1.020869528705834053653223734111374221329e12",
                "6.117648926532970152207255960223897772246e11",
                "3.723336367289530143723486983411165604969e11",
                "2.299365650716705661465508227431115513095e11",
                "1.439599708347328332115951096727542379419e11",
                "9.130500680905699334379481653964807198574e10",
                "5.862132336020415014481058223743324006870e10",
                "3.807489922439305887591282693605613850790e10",
                "2.500231742839232747538104616241919053410e10",
                "1.658961876997635129394646990421812987292e10",
                "1.111684449522546063092220109094750388263e10",
                "7.519800242806260443587605602396238478052e9",
                "5.132348950683312200037150830760398408071e9",
                "3.532889255074495397520437737927553320410e9",
                "2.451765558784781087318401976076090016350e9",
                "1.714767181100055843180010424373796343528e9",
                "1.208261997581027700447487107461717659893e9",
                "8.574494985640956868275400465973048413133e8",
                "6.126575299805705027682406881185551574836e8",
                "4.406228009585903498053594669904754182806e8",
                "3.188904722841340279123143178067907836633e8",
                "2.321847043927511961860426690753461148828e8",
                "1.700362141909038365825731627417488431508e8",
                "1.252186415547982501247376553627051151590e8",
                "9.270978274265678586057534487252663226374e7",
                "6.899622612758540081541952321231782628629e7",
                "5.160443825169660604982348626685653355905e7",
                "3.878231312910646593268035853022367736390e7",
                "2.928142742687821477349403432172876399629e7",
                "2.220717406560000393847241985698832947438e7",
                "1.691495888385429234368413444889309922700e7",
                "1.293786141105245190839054107587537686233e7",
                "9.935923926200786038010995411504309944144e6",
                "7.660398749658640061196610397090201042665e6"
            };

            ddouble[] nu0peps_expecteds = {
                "2.892318667371303836454416139527065843327",
                "2.207869086745699012397915049208852503014",
                "1.814492227326928641630174872688051741709",
                "1.541506751248642022438863158289396402015",
                "1.335139359514199744716212626901591619908",
                "1.171280933849069075480845469798127911568",
                "1.036973748418323285048125930935605643603",
                "0.9244190712277943982750278548585283928029",
                "0.8285424544133801974125505154659769270411",
                "0.7458478907288054757997802877486305087736",
                "0.6738192977862688817731332338486953135045",
                "0.6105824221165273727032861441769628444721",
                "0.5547017892688869492970836459755388924921",
                "0.5050525915925589249701647716119741021523",
                "0.4607365029567991540138035590518222759379",
                "0.4210244382407433273997323148525828155341",
                "0.3853164851976974352571454370378202499970",
                "0.3531131444800071815865400568619587964519",
                "0.3239942300566906855992107197911169110925",
                "0.2976030890841266364735650476400110207929",
                "0.2736345972970079858996639636702893506418",
                "0.2518258867168650295571188755241576541793",
                "0.2319490854531619121188668015054850883154",
                "0.2138055626475385659636338834504278489548",
                "0.1972213154497704912736954061512071281005",
                "0.1820432337892971806518049803860179121259",
                "0.1681360478614186508089589428573012347498",
                "0.1553798123866117860755825698266907514864",
                "0.1436678171279138203226354775631973678662",
                "0.1329048390345989028825784410888599519048",
                "0.1230056705255602553251304359509769571019",
                "0.1138938727495388041271797123041081971330",
                "0.1055007134900840764548084747493414519748",
                "0.09776425765402977813300523973308160059883",
                "0.09062858465692188594638712707362211106801",
                "0.08404311197466169262112029762138191647364",
                "0.07796200801480623549991000042043801803721",
                "0.07234368052855612271747711821103228846326",
                "0.06715032922461429499709241987963769509068",
                "0.06234755320036861007191208296898856244409",
                "0.05790400538105813961392463673671660320690",
                "0.05379108743498733642180134683382361361120",
                "0.04998267967473656217015803630009396897095",
                "0.04645490130876242139101284892193257156079",
                "0.04318589711215678962886102104271081717124",
                "0.04015564716887271730183412735126833820610",
                "0.03734579682343801188209708278962071599284",
                "0.03473950438628039843709761771284604401177",
                "0.03232130447778559576985693970052974108475",
                "0.03007698518371078681712261218483279093497",
                "0.02799347743792095422112033913656842182507",
                "0.02605875525515575330107573291873514893318",
                "0.02426174561280386982537988343893128581018",
                "0.02259224693146509079873557496054618654542",
                "0.02104085523351906826440542552403535946468",
                "0.01959889717036905458228159353690479642131",
                "0.01825836920527718014545142830523376479776",
                "0.01701188232206778456812714653368598939321",
                "0.01585261170237205706479940217112767667024",
                "0.01477425087712910478527888803161991139043",
                "0.01377096991309379472896837079085635928354",
                "0.01283737724326429258074342077921573761305",
                "0.01196848479238898766440094914091298173639",
                "0.01115967608585330962948304710429417330727"
            };

            ddouble[] nu4meps_expecteds = {
                "3.144697169288860707799727673764016401752e6",
                "196351.8724363984843105683578072892982154",
                "38722.55272823703450165741561492709307076",
                "12224.22927094151126074759225063629857932",
                "4992.445407702832025446219879870247704171",
                "2399.058639910049510223875326556059235375",
                "1289.520628867968247865513206883547528967",
                "752.2441476342431032763962996056034361178",
                "467.0599493251096010417969154459733652396",
                "304.5749732898384674512136957745396370995",
                "206.6354890445966246631068682585781089422",
                "144.8319572399215471518697633749472670839",
                "104.3192725701377700163608818490805199651",
                "76.89744698792270749900456356848339153989",
                "57.82098235177122120835719717098411692970",
                "44.23237418423701585420499495243323002058",
                "34.35108161318349561205097360483700780332",
                "27.03406293602578391451452100937707778645",
                "21.52804734138525380928046517067693375249",
                "17.32496744681657865404683455083345240926",
                "14.07497091342219379740920986874791992630",
                "11.53263178339950377101825512894485080891",
                "9.522868027467382420885906854079887994373",
                "7.918864736296178254836708613381021286712",
                "6.627485647295665240595511757396760781635",
                "5.579456222646977606648488596578235493709",
                "4.722646937251269531243056814095489940063",
                "4.017407099166011701971328615885864343568",
                "3.433277339356522302246315294752404444847",
                "2.946643164300975281322464172247338880848",
                "2.539039914354898087127469699058666460021",
                "2.195914517311918574875733910369000841408",
                "1.905711459615458779420794124760927972815",
                "1.659191483461112686877865117218575933185",
                "1.448919105388795114876479175259304159517",
                "1.268873814393381430640273888820206376408",
                "1.114152722040513160091977835803211597163",
                "0.9807414269108732802773214649866319177124",
                "0.8653361801778693102953383400210964381758",
                "0.7652049330909964747447937727520276540646",
                "0.6780780706060506591763730732034247199129",
                "0.6020619682295258783838404416002831974996",
                "0.5355702116994920679939414325951487262543",
                "0.4772685716614503177448784248352520218346",
                "0.4260307539821989668295509310713839168866",
                "0.3809026395982696915749631737589043198113",
                "0.3410732489805794079100741853633471427445",
                "0.3058510606946567515330699054845893226048",
                "0.2746446138590450171150454149433721053814",
                "0.2469465543607280070258302157308004000002",
                "0.2223204619240720863465365377670642723135",
                "0.2003899324227865037262368512931096786865",
                "0.1808294967327646418907538948517262914411",
                "0.1633570410902727978009173474194414357005",
                "0.1477274597132862331123248635959892185775",
                "0.1337273224216025918327580160324350327295",
                "0.1211703812374668248629338623491090944594",
                "0.1098937728186668518512938783248517938192",
                "0.09975479987921772390826420419330814421696",
                "0.09062819588437794733890156871026408774668",
                "0.08240379434854434032591793158597060446782",
                "0.07498453785878232730511672007229948384468",
                "0.06828477315198415199865024955960873016786",
                "0.06222878770709877062452035941614372350850"
            };

            ddouble[] nu4peps_expecteds = {
                "3.144711330564836991094318708406567118299e6",
                "196352.6269174172004023508560827123310537",
                "38722.68656604465741494313255594388550799",
                "12224.26817687936179138805899384436292016",
                "4992.460239280918827279635813346982163710",
                "2399.065352590356397685904458144323123026",
                "1289.524049130546754529032048209925322027",
                "752.2460481878130145535698527886172608007",
                "467.0610776844488215538253930749925186792",
                "304.5756790727016126115607283701940642702",
                "206.6359495168502968759102274906558316666",
                "144.8322682912250394098456294064853569590",
                "104.3194888996582906568219132023183422437",
                "76.89760121352525837422824629333590361983",
                "57.82109466961989895814767808053659234800",
                "44.23245750993060835954839630793984746032",
                "34.35114444130989639633173023031777423849",
                "27.03411099249719775625926326597309412545",
                "21.52808457056337647201306624501347590198",
                "17.32499661881914625294351641886610159550",
                "14.07499400763712407926521489206600477365",
                "11.53265023639556654861026568598763677995",
                "9.522882896650552770842742293722214394642",
                "7.918876810018814226489008002677433946097",
                "6.627495520229431670710424356034839058743",
                "5.579464348197741096825180759770207640664",
                "4.722653664539325432985235999786418878734",
                "4.017412699465778017191687082219199383153",
                "3.433282025233356918749112420445842778635",
                "2.946647103620371449123636995085922161935",
                "2.539043240646615776357746218463336631169",
                "2.195917337513020936940622730640171685066",
                "1.905713859908289475614051995883284446760",
                "1.659193533712731127623585233822914120833",
                "1.448920862554061836901060243770543793087",
                "1.268875325143315920595595001627269071398",
                "1.114154024806704106653926760832885185953",
                "0.9807425534863094585266627966382961673749",
                "0.8653371569783410586471640774725893538231",
                "0.7652057821549608771572119084927282331791",
                "0.6780788103916553319522961133346340994214",
                "0.6020626142533354046386616473257142054478",
                "0.5355707770509505949969187783239692467785",
                "0.4772690674192503217147124392665668391439",
                "0.4260311895528023758090128080816220994813",
                "0.3809030229923356211582304041617768905059",
                "0.3410735870396252650801303665899175341970",
                "0.3058513592776485467029437363542744975794",
                "0.2746448779965817510771606894104989603376",
                "0.2469467883829086240092845782894070245345",
                "0.2223206695669035827963798049691179827772",
                "0.2003901169170274207390493465700474364009",
                "0.1808296608783384064379216519622524870484",
                "0.1633571873187840661555787805092742314573",
                "0.1477275901406953931517054992724744239545",
                "0.1337274388927320070787926498651239479150",
                "0.1211704853637065664880478669255390823002",
                "0.1098938660100015767075434216245343394113",
                "0.09975488337149760128089805955904351119351",
                "0.09062827076259543033650989670915495569722",
                "0.08240386156674753329018432502831177252922",
                "0.07498459825714875079140025067734439220069",
                "0.06828482747149113870035194784405701077571",
                "0.06222883660215480242865744310528354228617"
            };

            for (int n = -16; n <= 16; n++) {
                foreach (ddouble u in new ddouble[] {
                    Math.ScaleB(-1, -8), Math.ScaleB(-1, -20), Math.ScaleB(-1, -25), Math.ScaleB(-1, 96),
                    Math.ScaleB(1, -8), Math.ScaleB(1, -20), Math.ScaleB(1, -25), Math.ScaleB(1, -96) }) {
                    ddouble nu = n + u;

                    if (ddouble.Abs(nu) > 16) {
                        continue;
                    }

                    for (ddouble x = 1d / 4; x <= 8; x += 1d / 4) {
                        ddouble y = DDoubleOptimizedBessel.RealBessel.BesselK(nu, x);
                        ddouble y_dec = DDoubleOptimizedBessel.RealBessel.BesselK(ddouble.BitDecrement(nu), x);
                        ddouble y_inc = DDoubleOptimizedBessel.RealBessel.BesselK(ddouble.BitIncrement(nu), x);

                        Console.WriteLine($"{nu}, {x}");
                        Console.WriteLine(y);
                        Console.WriteLine(y_dec);
                        Console.WriteLine(y_inc);

                        Assert.IsTrue(ddouble.Abs((y_dec - y) / y) < 8e-29);
                        Assert.IsTrue(ddouble.Abs((y_inc - y) / y) < 8e-29);
                    }
                }
            }

            ddouble eps = Math.ScaleB(1, -21);

            foreach ((ddouble nu, ddouble[] expecteds) in new (ddouble, ddouble[])[] {
                (15 + eps, nu15peps_expecteds), (16 - eps, nu16meps_expecteds),
                (eps, nu0peps_expecteds), (4 - eps, nu4meps_expecteds), (4 + eps, nu4peps_expecteds)
            }) {
                for ((ddouble x, int i) = (1d / 16, 0); i < expecteds.Length; x += 1d / 16, i++) {
                    ddouble expected = expecteds[i];

                    ddouble actual = DDoubleOptimizedBessel.RealBessel.BesselK(nu, x);

                    Console.WriteLine($"{nu}, {x}");
                    Console.WriteLine(expected);
                    Console.WriteLine(actual);

                    Assert.IsTrue(ddouble.Abs((expected - actual) / expected) < 8e-29);
                }
            }
        }
    }
}