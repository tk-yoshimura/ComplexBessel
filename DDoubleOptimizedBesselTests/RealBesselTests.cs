using ComplexBessel;
using DoubleDouble;

namespace DDoubleOptimizedBesselTests {
    [TestClass()]
    public class RealBesselTests {
        [TestMethod()]
        public void BesselJTest() {
            for (double nu = -16; nu <= 16; nu += 0.25) {
                Console.WriteLine(nu);

                for (double x = 0.125; x <= 42; x += 0.125) {

                    ddouble expected = BesselN4.BesselJ(nu, x).R.ToString();
                    ddouble actual = DDoubleOptimizedBessel.RealBessel.BesselJ(nu, x);

                    ddouble err = ddouble.Abs((expected - actual) / expected);

                    Console.WriteLine($"{nu}, {x}, {err:e4}");
                    Console.WriteLine(expected);
                    Console.WriteLine(actual);

                    Assert.IsTrue(err < 6e-27, $"\n{nu}, {x}\n{expected}\n{actual}\n{err:e4}");
                }

                Console.WriteLine(string.Empty);
            }
        }

        [TestMethod()]
        public void BesselYTest() {
            for (double nu = -16; nu <= 16; nu += 0.25) {
                Console.WriteLine(nu);

                for (double x = 0.125; x <= 42; x += 0.125) {

                    ddouble expected = BesselN4.BesselY(nu, x).R.ToString();
                    ddouble actual = DDoubleOptimizedBessel.RealBessel.BesselY(nu, x);

                    ddouble err = ddouble.Abs((expected - actual) / expected);

                    Console.WriteLine($"{nu}, {x}, {err:e4}");
                    Console.WriteLine(expected);
                    Console.WriteLine(actual);

                    Assert.IsTrue(err < 6e-27, $"\n{nu}, {x}\n{expected}\n{actual}\n{err:e4}");
                }

                Console.WriteLine(string.Empty);
            }
        }

        [TestMethod()]
        public void BesselITest() {
            for (double nu = -16; nu <= 16; nu += 0.25) {
                Console.WriteLine(nu);

                for (double x = 0.125; x <= 42; x += 0.125) {

                    ddouble expected = BesselN4.BesselI(nu, x).R.ToString();
                    ddouble actual = DDoubleOptimizedBessel.RealBessel.BesselI(nu, x);

                    ddouble err = ddouble.Abs((expected - actual) / expected);

                    Console.WriteLine($"{nu}, {x}, {err:e4}");
                    Console.WriteLine(expected);
                    Console.WriteLine(actual);

                    Assert.IsTrue(err < 4e-30, $"\n{nu}, {x}\n{expected}\n{actual}\n{err:e4}");
                }

                Console.WriteLine(string.Empty);
            }
        }

        [TestMethod()]
        public void BesselKTest() {
            for (double nu = 0; nu <= 16; nu += 0.25) {
                Console.WriteLine(nu);

                for (double x = 0.125; x <= 42; x += 0.125) {

                    ddouble expected = BesselN4.BesselK(nu, x).R.ToString();
                    ddouble actual = DDoubleOptimizedBessel.RealBessel.BesselK(nu, x);

                    ddouble err = ddouble.Abs((expected - actual) / expected);

                    Console.WriteLine($"{nu}, {x}, {err:e4}");
                    Console.WriteLine(expected);
                    Console.WriteLine(actual);

                    Assert.IsTrue(err < 8e-30, $"\n{nu}, {x}\n{expected}\n{actual}\n{err:e4}");
                }

                Console.WriteLine(string.Empty);
            }
        }


        [TestMethod]
        public void BesselYInterpolateTest() {
            ddouble[] num16peps_expecteds = {
                "-2.773781224080996664594569251500603793250e16",
                "-4.450123852134823173004790163851327384844e11",
                "-7.368655184955525781995063516649200327290e8",
                "-8.314116418781916065258954885336932760416e6",
                "-272949.0277102876834528963163560590919786",
                "-17862.81343783978372361289872660418429812",
                "-1906.675276744830475382045468337869677891",
                "-294.8647994883016606898619415053656391392",
                "-61.31574109928006112642421273704745991315",
                "-16.33416589107662871817687653510874200577",
                "-5.407585838476336057384235235990550650768",
                "-2.190065680789719854119658622683911085576",
                "-1.079266131926259263436734903095492982621",
                "-0.6398781488889317672330762650582489513483",
                "-0.4354460769384310487892527316369411035552",
                "-0.3075580177347255705907265390210738911861",
                "-0.1902179370037073084719028030324090353768",
                "-0.06093428217256750730761050773836112551778",
                "0.07165469843799008089469185107270897448342",
                "0.1761874724426298075750049577792785983350",
                "0.2148727711516144835362041980727723964212",
                "0.1668553229653483560885179915346689925669",
                "0.04780289250785903300762323314478132301822",
                "-0.08838877544369837417780234187008348018005",
                "-0.1724235682203511445102356878286630675695",
                "-0.1579989800825308108411720370409835412803",
                "-0.05300158663610386760200062654241692359998",
                "0.07962121349239315668083673230940986532972",
                "0.1573819429683515379422863181414770513543",
                "0.1308960486599492321125040893101364245495",
                "0.01874559051376334778872075241539357106062",
                "-0.1022237692988386725453988283002962628443",
                "-0.1483593785932801402519789664054264349121",
                "-0.08829325864430714439153100422286250331789",
                "0.03328734543305640862894214687831631546391",
                "0.1269260752607982041537306604930786384455",
                "0.1239939630970672256830383333547345749715",
                "0.02832164544429639448544726257787460994445",
                "-0.08615855380056593645580964130927376008653",
                "-0.1316384264907522589160081049303867415337",
                "-0.07422499999629636945064688583647632258082",
                "0.03958850717008696093966220790500850413127",
                "0.1194768735646656342441831080661091607498",
                "0.1028383306372725892115129328402846447106",
                "0.004594706445448961763473985983547325723363",
                "-0.09508114034508249946620103403685420968092",
                "-0.1157587853953431814701285351919907828652",
                "-0.04200057419089771345262414076803115735324",
                "0.06445589292044385074500181846640067235222",
                "0.1158177653758444381932245482669481060940",
                "0.07070218064030088466548655862969148925606",
                "-0.03201033235329470775994610065219307698767",
                "-0.1061066149828694723083190999795944821714",
                "-0.09028343312396456438784991750548841098138",
                "0.0008042528016720683161691987966775338217196",
                "0.08952628214398248451072399425583716733647",
                "0.1012091348571043945576871961609800242009",
                "0.02715960331223073556907827689491037993050",
                "-0.06860602365067227291290196413717509910899",
                "-0.1044238580197953265360501622477860895626",
                "-0.05067501477959232464511516879988172326887",
                "0.04545444412824944171065206505873936803946",
                "0.1011020635182135852252772913152631936679",
                "0.06912245026380539024770925543444058002519"
            };
            ddouble[] num15meps_expecteds = {
                "9.256973740086818276556668796459652722131e14",
                "2.981023765093261470655777637218199758218e10",
                "7.449485766489365586955983360957946386937e7",
                "1.130581196061021822466525793941106469115e6",
                "46940.49684405467906842665471271378351026",
                "3741.856803824952643667572068908489555835",
                "474.7940904510087274553760563372850159455",
                "85.90267531233497883052953474919617797690",
                "20.69693748393366990088058057320507448562",
                "6.364745961353218859021448825565511352454",
                "2.440938361655320253483355735063513084710",
                "1.156577325973602426158093453872250001163",
                "0.6684953632938678848547606874400341211479",
                "0.4486783471914340486674053302697576120771",
                "0.3142545622197881715973753700021643492774",
                "0.1916396310283356572938240934796261988218",
                "0.05665908484016836402821043461628025402275",
                "-0.08048093390279761988365385871780039391827",
                "-0.1853731776910388589018083571940584280174",
                "-0.2182666143091572847968008853555591025765",
                "-0.1599258398028642199456616384202948695889",
                "-0.03166431117627127535429621464857228081798",
                "0.1057807115844930039879961974321491636159",
                "0.1800249080692364489470821124672102744639",
                "0.1490215231373686127254532920382813756318",
                "0.03099188814777743520772923908005798219631",
                "-0.1012149416278861019599315314283443276691",
                "-0.1634009850446247812199869099116865198003",
                "-0.1155640921689045612058167286486390045677",
                "0.008628927486518004697117522299811903243918",
                "0.1224290678845219958876014837312580722145",
                "0.1459023605135959982923267792675618756814",
                "0.06373319442213502852777378948109355614404",
                "-0.06235943313951383797415369932182943574962",
                "-0.1383350293554152977494992774989919619771",
                "-0.1081621977741818677431979898210950839684",
                "0.003318974313632282624090489150218224108113",
                "0.1091073754328559037498904682601782550151",
                "0.1273653210983134366945221923983327573902",
                "0.04544640729333049645430923581681661373593",
                "-0.07021760316804938135864310117016653912802",
                "-0.1271219591266203249714993333990773557855",
                "-0.08081739871917960992355207356744795135472",
                "0.02952552331217377570366258141266569823335",
                "0.1133423507948462388093608770835074108863",
                "0.1028072390395443953952524244884472689048",
                "0.008222276039854569903191031149979717528478",
                "-0.09107383729625278202686257490906262504881",
                "-0.1128797471999607593936205559604833416867",
                "-0.04041279903228588038768374824370649855585",
                "0.06429633185827094439288042428443883825510",
                "0.1130562045015818297905781234578848144596",
                "0.06583080609469947936018518685653697514963",
                "-0.03600483857562759342021542870816148464222",
                "-0.1054614485573141320932938214085587701854",
                "-0.08415103382368085902720088182969952175721",
                "0.008373206094912417867487432483561046778550",
                "0.09210568054835392328012392578689852436360",
                "0.09560024858539724634099934376875977398235",
                "0.01707926504770979922213717897452066533645",
                "-0.07478970376887725839873463609015487171958",
                "-0.1007358038705938539959783929830737109502",
                "-0.03934391920606539194867048695680914341020",
                "0.05507317332487191173019448547950835878882"
            };
            ddouble[] nup15peps_expecteds = {
                "-9.256973740086828419850514310123694561863e14",
                "-2.981023765093264737101255262273405225220e10",
                "-7.449485766489373749701742577601363314969e7",
                "-1.130581196061023061297492696214816208526e6",
                "-46940.49684405473052575310782373458332136",
                "-3741.856803824957033646397488078387328183",
                "-474.7940904510116160081976665163387551591",
                "-85.90267531234877070913842494604380613209",
                "-20.69693748399391260911668211400066276344",
                "-6.364745961564259283177609188671070219260",
                "-2.440938362264322421865562586796495527815",
                "-1.156577327453498831946387948983362811162",
                "-0.6684953663668757753892046750108810363675",
                "-0.4486783526890485102150879001771043592045",
                "-0.3142545707073508630975616999231609924851",
                "-0.1916396422607885285500549318691921549939",
                "-0.05665909731929188476620327846954363302490",
                "0.08048092287392343878945972731786123709538",
                "0.1853731711863993198806975157778545510031",
                "0.2182666143471731089117667946825857727890",
                "0.1599258459887487064854335154750615472571",
                "0.03166432034750520762368592254844069972804",
                "-0.1057807041518875946791528567522645735350",
                "-0.1800249062610691129343439109182376460664",
                "-0.1490215277161376960349855308449909836891",
                "-0.03099189611631267980033060197181080479771",
                "0.1012149353331364734288917976584202085457",
                "0.1634009843803593966599404170269514689080",
                "0.1155640973555522520887759226064709187893",
                "-0.008628920172064848857058869342065459725563",
                "-0.1224290635776291780986288662328999716909",
                "-0.1459023621512151764974333908713022362332",
                "-0.06373320063039313586405698462080077545295",
                "0.06235942704153406886850639341065030140346",
                "0.1383350278835082428296885699767648655637",
                "0.1081622018948992678665606940988684055981",
                "-0.003318967893848828897283167902128529292490",
                "-0.1091073717097384476847522638912347649656",
                "-0.1273653228859685117039442143248254977261",
                "-0.04544641304579641989765589300028778209517",
                "0.07021759809348360278076623495292697154951",
                "0.1271219587484884479019812707513162041573",
                "0.08081740322487085629311240849653529579852",
                "-0.02952551767184631664941003455809639699960",
                "-0.1133423486207270357396061956738091346553",
                "-0.1028072420256075527420291014833771996126",
                "-0.008222281622899492176989052575405494230930",
                "0.09107383377238544783694719063540241921298",
                "0.1128797486076948351319789927690974919861",
                "0.04041280409869182139033001832255771398934",
                "-0.06429632743563578575789049704971137172592",
                "-0.1130562044141943291421093790522039079969",
                "-0.06583081033101169264688067040066553175787",
                "0.03600483367138132378197055282254846314356",
                "0.1054614471466432259415577306608759597599",
                "0.08415103703891927040341783348532830338947",
                "-0.008373201073426647967150241938319623050231",
                "-0.09210567803666788585094632054622702338269",
                "-0.09560025068769456366443510863013162228086",
                "-0.01707926988242890951829404161074731065122",
                "0.07478970040190758710291198347439652949944",
                "0.1007358048460993543155303969788461799039",
                "0.03934392361146585112861013621763131290051",
                "-0.05507316935298817911449190910193361028268"
            };
            ddouble[] nup16meps_expecteds = {
                "-2.773781224080999703954819047159946936865e16",
                "-4.450123852134828049211112934446826679437e11",
                "-7.368655184955533856171018395357545223197e8",
                "-8.314116418781925175420353011522962132570e6",
                "-272949.0277102879825321646549456986607685",
                "-17862.81343783980324045559543247168092168",
                "-1906.675276744832021004432702362177395253",
                "-294.8647994882983320438538419659282802361",
                "-61.31574109926171656813666046465373889525",
                "-16.33416589100330146440389637091371890653",
                "-5.407585838237124511272358903047641220121",
                "-2.190065680134737276539480056934154767549",
                "-1.079266130394303255677735777946438776421",
                "-0.6398781457930269506235876881563793477068",
                "-0.4354460714999927314072434407810315097068",
                "-0.3075580094275423425070865099979523100426",
                "-0.1902179260491516879951168208613032004747",
                "-0.06093426995043970307587342315626310995886",
                "0.07165470941385738138641016755568562869595",
                "0.1761874792389887405022698911333727542930",
                "0.2148727717142508997682133366267007354822",
                "0.1668553174191010533267227572180498949768",
                "0.04780288361726652741238976726387700739653",
                "-0.08838878322920528157724086634482928117366",
                "-0.1724235709220091994846277855412012631433",
                "-0.1579989764436035204792950066636908511288",
                "-0.05300157902696978327133548042179812275609",
                "0.07962122032991796866455062932454047048305",
                "0.1573819447974802539656618751003280327999",
                "0.1308960444905121545003273726750264581462",
                "0.01874558332078177907110643574215752469005",
                "-0.1022237745346619040596659053875760675757",
                "-0.1483593783115960355512479364010414159267",
                "-0.08829325322205727538588675981597521449963",
                "0.03328735194254878706146021528251954520067",
                "0.1269260780789343143083964096878705866797",
                "0.1239939602486561942897149178756320151215",
                "0.02832163922265597751355789159107954241855",
                "-0.08615855859104050790190708233860422799616",
                "-0.1316384262225792967482060926321586218600",
                "-0.07422499500856850735317365683169856242566",
                "0.03958851286972210891514439566112732324799",
                "0.1194768754794928648690935915717215775524",
                "0.1028383273423718025325365336968265599882",
                "0.004594700690456218087898814469432627416806",
                "-0.09508114388528335206871485104858019105461",
                "-0.1157587839122352487367558094534541218968",
                "-0.04200056899865700625218613934648677737471",
                "0.06445589750473742378717946139566748590830",
                "0.1158177656051439191144450489551736224747",
                "0.07070217641503133724959532881852665415662",
                "-0.03201033744738832176184079154093962948135",
                "-0.1061066166964625690356962608280798842024",
                "-0.09028343009318621525062984124712197973315",
                "0.0008042579504250877522934304380289431390758",
                "0.08952628504752351087720437976774647357020",
                "0.1012091331101581787462638901315347481773",
                "0.02715959847412782117896620949418413675303",
                "-0.06860602742570264453662872624022587267395",
                "-0.1044238575423365221324797965282769054350",
                "-0.05067501052845315025694798703274991059101",
                "0.04545444845979333015379125215266641864806",
                "0.1011020642211851654579954597374639962361",
                "0.06912244679360466205618231041169858148595"
            };

            for (int n = -16; n <= 16; n++) {
                foreach (ddouble u in new ddouble[] {
                    Math.ScaleB(-1, -12), Math.ScaleB(-1, -13), Math.ScaleB(-1, -11), Math.ScaleB(-1, -26), Math.ScaleB(-1, 96),
                    Math.ScaleB(1, -12), Math.ScaleB(1, -13), Math.ScaleB(-1, -11), Math.ScaleB(1, -26), Math.ScaleB(-1, -96) }) {
                    ddouble nu = n + u;

                    if (ddouble.Abs(nu) > 16) {
                        continue;
                    }

                    for (ddouble x = 1d / 4; x <= 16; x += 1d / 4) {
                        ddouble y = DDoubleOptimizedBessel.RealBessel.BesselY(nu, x);
                        ddouble y_dec = DDoubleOptimizedBessel.RealBessel.BesselY(ddouble.BitDecrement(nu), x);
                        ddouble y_inc = DDoubleOptimizedBessel.RealBessel.BesselY(ddouble.BitIncrement(nu), x);

                        Console.WriteLine($"{nu}, {x}");
                        Console.WriteLine(y);
                        Console.WriteLine(y_dec);
                        Console.WriteLine(y_inc);

                        Assert.IsTrue(ddouble.Abs((y_dec - y) / y) < 1e-22);
                        Assert.IsTrue(ddouble.Abs((y_inc - y) / y) < 1e-22);
                    }
                }
            }

            ddouble eps = Math.ScaleB(1, -26);

            foreach ((ddouble nu, ddouble[] expecteds) in new (ddouble, ddouble[])[] {
                (-16 + eps, num16peps_expecteds), (-15 - eps, num15meps_expecteds), (15 + eps, nup15peps_expecteds), (16 - eps, nup16meps_expecteds),
            }) {
                for ((ddouble x, int i) = (1, 0); i < expecteds.Length; x += 1, i++) {
                    ddouble expected = expecteds[i];

                    ddouble actual = DDoubleOptimizedBessel.RealBessel.BesselY(nu, x);

                    Console.WriteLine($"{nu}, {x}");
                    Console.WriteLine(expected);
                    Console.WriteLine(actual);

                    Assert.IsTrue(ddouble.Abs((expected - actual) / expected) < 2e-24);
                }
            }
        }

        [TestMethod]
        public void BesselKInterpolateTest() {
            ddouble[] nu15peps_expecteds = {
                "1.403066871586938868772687579047436898106e15",
                "4.059213493620098616296963229879609554535e10",
                "8.484692239802017865177020687811668023146e7",
                "1.002689640278238458401949877427475467540e6",
                "30169.76710466898811589135798283246580366",
                "1621.164430660170559323471312169099810074",
                "128.8397332142382014800955075180909566570",
                "13.53998723524101566418812190028786905076",
                "1.751442936804272956413164547000211881229",
                "0.2656563894946374795882956780530125790071",
                "0.04566016513712899176382623028553515249655",
                "0.008674111848300782581424750701922070173468",
                "0.001787667725325096622724904545728406392536",
                "0.0003940335773735938465727811084848242005875",
                "0.00009186390465427953253107442454747933976327",
                "0.00002245484588402089903267913011674238235648",
                "5.714428794407082528405219402286605262467e-6",
                "1.505406415604555536000264842174702041266e-6",
                "4.086202744866016042645964312018958162390e-7",
                "1.138383177541522133399738245618441784029e-7",
                "3.244550591353423482340183896978752428283e-8",
                "9.434875106876049879577393006291051027410e-9",
                "2.792747962773598427332017802736085202267e-9",
                "8.398217984231148529266671551946410709571e-10",
                "2.561353288694205663818772911698263806696e-10",
                "7.911274913230110322113026783014760307883e-11",
                "2.471552123848951290361450010927858345225e-11",
                "7.801202425808962825804565773121579759058e-12",
                "2.485441433347420880642514600649693260401e-12",
                "7.985977271210910896160004811594289269456e-13",
                "2.585893805106255769335844344841395828224e-13",
                "8.432647860673637568601464666466849084629e-14",
                "2.767785414696783412792946607923748763773e-14",
                "9.138778967268500546359323460235013129729e-15",
                "3.034082380105732161438785803937610369116e-15",
                "1.012434791120766095598808806234426077542e-15",
                "3.394240610008856881003134811247778111344e-16",
                "1.142892859779390023790794707353667910195e-16",
                "3.863859892947524866561558099525506369515e-17",
                "1.311198141172736757731068030784449863189e-17",
                "4.465145640364524509633148177481840529127e-18",
                "1.525535753654483503117406246672211356496e-18",
                "5.228011184449736193943539215777507160408e-19",
                "1.796775150527224712330071694155628476928e-19",
                "6.191798998600231399812235056688499133499e-20",
                "2.139119065737212993163778022477201803480e-20",
                "7.407690704398927964307325684199094089103e-21",
                "2.570990080571047024294098624883166565751e-21",
                "8.941948685868828557987376727706770808687e-22",
                "3.116211193280522145861875664952811999598e-22",
                "1.088020451098339155783718799192005348284e-22",
                "3.805560963027792361717178480702283241933e-23",
                "1.333309236041203575578638613085895528731e-23",
                "4.678812810449070270134293655491646757486e-24",
                "1.644362835628122122660098148978099984496e-24",
                "5.787404719998747057161029082468023148029e-25",
                "2.039686832766426284474346029988300913104e-25",
                "7.197933040419453531840256477683625486437e-26",
                "2.543254803361784596348009615303997132348e-26",
                "8.996726162865761545657349272430238411077e-27",
                "3.186163490541742099727462845900324837138e-27",
                "1.129583550121639189037549253014997064541e-27",
                "4.008801676737022776408662101076080265174e-28",
                "1.424088885242839926544185784739113591332e-28"
            };

            ddouble[] nu16meps_expecteds = {
                "4.214204277830513066828974811958135247897e16",
                "6.117656685007091287346848831379093587956e11",
                "8.574504275417349104484153231325888728321e8",
                "7.660406057419185609958558898859944985085e6",
                "186233.5776616408636901158235679438655462",
                "8437.649460623175282672823725528954960426",
                "582.4779938979313646751114846160497950978",
                "54.35542747314990805961710097978277310235",
                "6.350009807338722008178451756679664450445",
                "0.8816292349085238485895215742709803952768",
                "0.1402229910896001730833997359332700494875",
                "0.02487271802871635633399931506752018951102",
                "0.004822408635559520111976885387176317590561",
                "0.001006351746414639093986595679001601603872",
                "0.0002233361316810656516058070272842934471482",
                "0.00005220990370188423031857302529932421965829",
                "0.00001275870406122970135629277829752815108369",
                "3.239044918735965531434211362853071656000e-6",
                "8.498915419222664293061312427751843028708e-7",
                "2.295116451590596403538365080049930196106e-7",
                "6.356245477460882482065616970423096388788e-8",
                "1.799921554584578909708865505802016505307e-8",
                "5.198310392497553621830592539727641176630e-9",
                "1.527868589559803013167256292397668942379e-9",
                "4.561597084168945627688401591991276974054e-10",
                "1.381201257722017632799582865408526128778e-10",
                "4.235455426020613514692595217616453419075e-11",
                "1.313765124784473005705636474689969884092e-11",
                "4.117623282165526726128691750415757161878e-12",
                "1.302804441742961182909421666040576887159e-12",
                "4.157723784759276100070083815478033859065e-13",
                "1.337385847910631203727815186849959925333e-13",
                "4.333099293337672732356454213080950306514e-14",
                "1.413279478889610528520264275960299539614e-14",
                "4.637865671418632881620450430750556369460e-15",
                "1.530612837382106208626116953372327315171e-15",
                "5.077924874990664461721598870459796183187e-16",
                "1.692838073414880814091496121606389325309e-16",
                "5.668954926736149169697719006737335413187e-17",
                "1.906396107782960892071366562073417341498e-17",
                "6.436092486888634042064881359772940670266e-18",
                "2.180809904385539614610301197482648746453e-18",
                "7.414757099209312315068244542228875795461e-19",
                "2.529097371533375658610567144225532236043e-19",
                "8.652416723696311316063182902109740103253e-20",
                "2.968474670022412902316004909308303845743e-20",
                "1.021128564416269780163334799038011150247e-20",
                "3.521368612727078805634385322859173034171e-21",
                "1.217207247909755359829461309635054405126e-21",
                "4.216792340479243385842163775422577562502e-22",
                "1.463900141769461702950483645922300861421e-22",
                "5.092171395278159012629411221713374741161e-23",
                "1.774643716409472261400907609351718557472e-23",
                "6.195743458570075198676894081520968073441e-24",
                "2.166756867392744070801507601221865213562e-24",
                "7.589698690426267100050558340582090221814e-25",
                "2.662576155866642940268206424241537007799e-25",
                "9.354282900246340491393021879490939418262e-26",
                "3.290938759286188464098103067336424408915e-26",
                "1.159315733388943571659737251443629312240e-26",
                "4.089119824166956239430249722035120595102e-27",
                "1.444040239239749311994589680724631098461e-27",
                "5.105364795721494904691438672230795217777e-28",
                "1.806967544888067178942416453008170274708e-28"
            };

            for (int n = -16; n <= 16; n++) {
                foreach (ddouble u in new ddouble[] {
                    Math.ScaleB(-1, -25), Math.ScaleB(-1, -30), Math.ScaleB(-1, -50), Math.ScaleB(-1, 96),
                    Math.ScaleB(1, -25), Math.ScaleB(1, -30), Math.ScaleB(1, -50), Math.ScaleB(-1, -96) }) {
                    ddouble nu = n + u;

                    if (ddouble.Abs(nu) > 16) {
                        continue;
                    }

                    for (ddouble x = 1d / 4; x <= 8; x += 1d / 4) {
                        ddouble y = DDoubleOptimizedBessel.RealBessel.BesselK(nu, x);
                        ddouble y_dec = DDoubleOptimizedBessel.RealBessel.BesselK(ddouble.BitDecrement(nu), x);
                        ddouble y_inc = DDoubleOptimizedBessel.RealBessel.BesselK(ddouble.BitIncrement(nu), x);

                        Assert.IsTrue(ddouble.Abs((y_dec - y) / y) < 2e-27);
                        Assert.IsTrue(ddouble.Abs((y_inc - y) / y) < 2e-27);
                    }
                }
            }

            ddouble eps = Math.ScaleB(1, -26);

            foreach ((ddouble nu, ddouble[] expecteds) in new (ddouble, ddouble[])[] {
                (15 + eps, nu15peps_expecteds), (16 - eps, nu16meps_expecteds),
            }) {
                for ((ddouble x, int i) = (1, 0); i < expecteds.Length; x += 1, i++) {
                    ddouble expected = expecteds[i];

                    ddouble actual = DDoubleOptimizedBessel.RealBessel.BesselK(nu, x);

                    Assert.IsTrue(ddouble.Abs((expected - actual) / expected) < 2e-27);
                }
            }
        }
    }
}