using MultiPrecision;
using MultiPrecisionComplex;
using System.Collections.ObjectModel;
using System.Diagnostics;

namespace ComplexBessel {
    public static class AmosPowerSeries<N> where N : struct, IConstant {
        static AmosPowerSeries() {
            if (default(N).Value > 8) {
                throw new ArgumentException(nameof(N));
            }
        }

        public static Complex<N> BesselK(MultiPrecision<N> nu, Complex<N> z) {
            Debug.Assert(nu >= 0d);

            int n = (int)MultiPrecision<N>.Round(nu);
            MultiPrecision<N> alpha = nu - n;

            if (n == 0) {
                Complex<N> k0 = BesselKNearZeroNu(alpha, z, terms: 256);

                return k0;
            }
            else if (n == 1) {
                Complex<N> k1 = BesselKNearOneNu(alpha, z, terms: 256);

                return k1;
            }
            else {
                Complex<N> kn = BesselKNearIntNu(n, alpha, z, terms: 256);

                return kn;
            }
        }

        private static Complex<N> BesselKNearZeroNu(MultiPrecision<N> alpha, Complex<N> z, int terms) {
            MultiPrecision<N> alpha2 = alpha * alpha;
            Complex<N> s = 1d / z, t = Complex<N>.Log(2d * s), mu = alpha * t;
            (MultiPrecision<N> g1, MultiPrecision<N> g2) = Gamma12(alpha);

            Complex<N> f = (g1 * Complex<N>.Cosh(mu) + g2 * t * Sinhc(mu)) / MultiPrecision<N>.Sinc(alpha);
            Complex<N> r = Complex<N>.Pow(z / 2d, alpha);
            Complex<N> p = MultiPrecision<N>.Gamma(1d + alpha) / (r * 2d), q = MultiPrecision<N>.Gamma(1d - alpha) * r * 0.5d;

            Complex<N> c = f, v = Complex<N>.Ldexp(z * z, -2), u = v;

            for (int k = 1; k <= terms; k++) {
                f = (k * f + p + q) / (k * k - alpha2);
                c = SeriesUtil<N>.Add(c, u, f, out bool convergence);

                if (convergence && f.Exponent >= -4) {
                    break;
                }

                p /= k - alpha;
                q /= k + alpha;
                u *= v / (k + 1);
            }

            return c;
        }

        private static Complex<N> BesselKNearOneNu(MultiPrecision<N> alpha, Complex<N> z, int terms) {
            MultiPrecision<N> alpha2 = alpha * alpha;
            Complex<N> s = 1d / z, t = Complex<N>.Log(2d * s), mu = alpha * t;
            (MultiPrecision<N> g1, MultiPrecision<N> g2) = Gamma12(alpha);

            Complex<N> f = (g1 * Complex<N>.Cosh(mu) + g2 * t * Sinhc(mu)) / MultiPrecision<N>.Sinc(alpha);
            Complex<N> r = Complex<N>.Pow(z / 2d, alpha);
            Complex<N> p = MultiPrecision<N>.Gamma(1d + alpha) / (r * 2d), q = MultiPrecision<N>.Gamma(1d - alpha) * r * 0.5d;

            Complex<N> c = p, v = Complex<N>.Ldexp(z * z, -2), u = v;

            for (int k = 1; k <= terms; k++) {
                f = (k * f + p + q) / (k * k - alpha2);
                p /= k - alpha;
                c = SeriesUtil<N>.Add(c, u, p, -k * f, out bool convergence);

                if (convergence && f.Exponent >= -4) {
                    break;
                }

                q /= k + alpha;
                u *= v / (k + 1);
            }

            c *= 2 * s;

            return c;
        }

        private static Complex<N> BesselKNearIntNu(int n, MultiPrecision<N> alpha, Complex<N> z, int terms) {
            MultiPrecision<N> alpha2 = alpha * alpha;
            Complex<N> s = 1d / z, t = Complex<N>.Log(2d * s), mu = alpha * t;
            (MultiPrecision<N> g1, MultiPrecision<N> g2) = Gamma12(alpha);

            Complex<N> f = (g1 * Complex<N>.Cosh(mu) + g2 * t * Sinhc(mu)) / MultiPrecision<N>.Sinc(alpha);
            Complex<N> r = Complex<N>.Pow(z / 2d, alpha);
            Complex<N> p = MultiPrecision<N>.Gamma(1d + alpha) / (r * 2d), q = MultiPrecision<N>.Gamma(1d - alpha) * r * 0.5d;

            Complex<N> c0 = f, c1 = p, v = Complex<N>.Ldexp(z * z, -2), u = v;

            for (int k = 1; k <= terms; k++) {
                f = (k * f + p + q) / (k * k - alpha2);
                p /= k - alpha;
                c0 = SeriesUtil<N>.Add(c0, u, f, out bool convergence0);
                c1 = SeriesUtil<N>.Add(c1, u, p, -k * f, out bool convergence1);

                if (convergence0 && convergence1 && f.Exponent >= -4) {
                    break;
                }

                q /= k + alpha;
                u *= v / (k + 1);
            }

            c1 *= 2 * s;

            for (int k = 1; k < n; k++) {
                (c1, c0) = (MultiPrecision<N>.Ldexp(k + alpha, 1) * s * c1 + c0, c1);
            }

            return c1;
        }

        public static (MultiPrecision<N> g1, MultiPrecision<N> g2) Gamma12(MultiPrecision<N> nu) {
            Debug.Assert(MultiPrecision<N>.Abs(nu) <= 0.5);

            MultiPrecision<N> nu2 = nu * nu;
            MultiPrecision<N> gm = 1 / MultiPrecision<N>.Gamma(1d - nu), gp = 1 / MultiPrecision<N>.Gamma(1d + nu);

            MultiPrecision<N> g1 = G1Coef[^1];

            for (int i = G1Coef.Count - 2; i >= 0; i--) {
                g1 = g1 * nu2 + G1Coef[i];
            }

            MultiPrecision<N> g2 = (gm + gp) / 2d;

            return (g1, g2);
        }

        public static Complex<N> Sinhc(Complex<N> z) {
            if (z.Magnitude.Exponent > -MultiPrecision<N>.Bits / 2) {
                return Complex<N>.Sinh(z) / z;
            }
            else {
                Complex<N> z2 = z * z;

                return (120 + z2 * (20 + z2)) / 120;
            }
        }

        public static readonly ReadOnlyCollection<MultiPrecision<N>> G1Coef = new([
            "-5.7721566490153286060651209008240243104215933593992359880576723488486772677766467093694706329174674951463144724980708248096050401448654283622417399764492353625350033374293733773767394279259525824709e-1",
             "4.2002635034095235529003934875429818711394500401106093522065812976180096875975988547107701294787713233532000222000018057920376210990751814478058169072837827833551569414228406815856717579225361966644e-2",
             "4.2197734555544336748208301289187391301652684189822486376918873275459011185588996067347284293755315040623348260570825108698753425736088810317283361935132168076530512155585922328171581893548000868870e-2",
            "-7.2189432466630995423950103404465727099048008802383180010947811736225949741585427140890901208498888637635801976888597953114153078227746907482684227488827782193064571540657208137032870274183736110631e-3",
             "2.1524167411495097281572996305364780647824192337833875035026748908563946371678473918618511946256248152595632197392449451634172110767474771233910867426689735579061754546072287373370919834000467348652e-4",
             "2.0134854780788238655689391421021818382294833297979115261162670908229186188970477623308123836503018826105986111587179319457235322699824166123571137370883309970412023003374424654823498057855600198576e-5",
            "-1.1330272319816958823741296203307449433240048386210756542955053954604084273036763420590995993415717941517231025547234722822470985150470769708148772450548203615272167739630229569524462195944833082102e-6",
            "-6.1160951044814158178624986828553428672758657197123208673240292772350743525038619728262116887501225683892487235937602750521102026072890948419281984087391569770442439560490974123560651636209905325437e-9",
             "1.1812745704870201445881265654365055777387595049325875909618926316964339143627314395179682881445597397880487583505666714007047267771560641561640181143865753073154942028052154386143942884386291339498e-9",
            "-7.7822634399050712540499373113607772260680861813929388194355073269298695750789780388273795076641072819133934624068890594351007585448190986321738490666770322305611592532285437872583979110693344552915e-12",
            "-5.1003702874544759790154813228632318027268860697076321173501048565735244789958170698326306387761986379183992397562298775065458583732182226662801485205192139160145940524387972885530222239085276026790e-13",
             "5.3481225394230179823700173187279399489897154781206821116809549321093145391434840956648344143646850543978538090984065307258508449954049443304984841971358860249415312657421571073972114970990264744722e-15",
             "1.1812593016974587695137645868422978312115572918048478798375081233347333150389845057395332771974547841071012147884280435351423847917140512787937632502678341250183047397267600277407061453034016929851e-16",
            "-1.4123806553180317815558039475667090370863507503345256256412226286007149117138456955524058652699332905253282343274935295865368301410838790290595935352475509024868439070354411903819825705111550294232e-18",
            "-1.7144063219273374333839633702672570668126560625174331746498581922023399583377163871306729249802184043231287082868086735566795538077378897643290247750784442110072926947942475620101782491263654799227e-20",
             "2.0542335517666727893250253513557337966820379352387364127300559948662870974501546088720333049537944598877602424364926555894811139633735286894061448461726070823806240219012290683183999719556065890394e-22",
             "1.7323564459105166390574284515647797990697491087949984137725562299487072534376449373560165507643256329186453000955065001173044313120957186667995126719265008277004499870109163019312168066595870681287e-24",
            "-1.8649829417172944307184131618786668989458684290736682321745253705479777793379194125155604617356398114394370725109290192119104516408237700158249599821152688689043993964967913515618986995361106561413e-26",
            "-1.2977819749479936688244144863305941656194998646391331968320565637241974979148161544151317430649834667385177826989419898529814459011534818465508824647044846653826006221638003008206735778059542906270e-28",
             "1.1245843492770880902936546742614395121194117955830108167333827883581516112144956409660434645930403665214141377211259106888155811291467612774142627032253231437546436650947622150783365892761727247346e-30",
             "7.3914511696151408234612893301085528237105689924515267666315906588427573369513177970092297499585927100825306729263562221603626794150107216683803814820209912947125836787920688564878619430154877088005e-33",
            "-4.6391346410587220299448049079522284630579686797271496895821731864337471342262533384849144253735135094463093469392002680975919856285448241374568571331889723488792862142081699911944194025128399938828e-35",
            "-3.2079959236133526228612372790827943910901463597261551870217006740604472687160788082028640772215093871830237286063751202495179322856629241289737035113941146396210241533768148605362122290526154086674e-37",
             "1.3111745188819887129010584943899221902366254495574260409965770530176211353547311416898805470187809252472969813508913195536510274783739310297165308011743432437671343273199962901644480281420817911624e-39",
             "1.0562331785035812186005610715382850499970350802925412712386804066096417060865780832369295173149774185542454803442055525778354125361067236301913234145633422113238499099116407198440985317799594937569e-41",
            "-2.4247154948517826896730329383709212407368104586477587604174232350950380570401442109409314593713662549925503029156355300357432954037578060706215167611158315527419547271649013709151168101150380137090e-44",
            "-2.6283329809401954490890376118736393542238494178091116522679263859167226141795824407879646784316604496513525001880652829647925492172953251976988485362084865053948985390096324315706078882531580278737e-46",
             "2.3279424186994705986042620556222918456687774095992551252404004336389670252955524252762693988825468894707736930239818736825220625651783618462674009332155019371499048116020736236990827578589005543819e-49",
             "4.9282955867709899305044586822125325941578457644432734680923786657521546536966202754462292648397002961240392157172057989508438006942280173414933833882274377347492991953908676611389541235219799660917e-51",
             "1.2187221891475165552504526050747581450109055103649783115430644885927324390300322639064868846996266015779324750357055362249082282715878330200288163892570175081434678093477333114768759696569633113516e-54",
            "-6.9205040543286892535284222290662700444334617255173536172047569027695988243876232048999685510224766587135127286280393867358455636642169356380522495638874657976301168656677982203483145646099163268575e-56",
            "-8.5630980562756543279817124547431565600246876414782181687408129492848078088440578503199539249155693138445678010399369234674879385904620543159260691353710259791527070023510910841488964751919207351369e-59",
             "7.1542945770816152181972798337136815543405168785013010819472368321868533069667453127731518396489142189262658148438964082895978567640839904316244610309942576629899771680518714093312995946948833851261e-61"
        ]);
    }
}
